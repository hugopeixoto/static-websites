#!/usr/bin/env ruby

require 'yaml'

def humanize_duration(duration)
  duration = (duration * 1000).to_i

  msecs = duration%1000
  secs = (duration/1000)%60
  mins = (duration/1000/60)%60
  hours = (duration/1000/60/60)%60

  "#{hours}h #{mins}m #{secs}s #{msecs}ms"
end

def fetch_app(config)
  if config["repository"].nil?
    STDERR.puts "  fetch: skipped"
    return
  else
    STDERR.puts "  fetch: #{config["repository"]}"
  end

  repo_dirname = config["repository_directory"]

  if File.exists?(repo_dirname)
    STDERR.print `git -C #{repo_dirname} restore .`
    STDERR.print `git -C #{repo_dirname} clean -fdx`
    STDERR.print `git -C #{repo_dirname} pull origin`
  else
    STDERR.print `git clone #{config["repository"]} #{repo_dirname}`
  end
end

def build_nginx_config(config)
  domains = config["domains"]
  primary_domain = config["primary_domain"]
  extra_config = config.fetch("extra_config", "").split("\n")

<<EOF
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  charset UTF-8;

  ssl_certificate /etc/letsencrypt/live/#{primary_domain}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/#{primary_domain}/privkey.pem;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  server_name #{domains.join(" ")};

  #{config["redirect"] ? "return 301 #{config["redirect"]};" : "root /srv/www/#{primary_domain}/public/;"}
#{extra_config.map{|line| line.empty? ? "#{line}\n" : "\t#{line}\n"}.join}}
EOF
end

def build_app(config)
  return if config["repository"].nil?

  repo_dirname = config["repository_directory"]

  if config["build"]
    STDERR.print `cd #{repo_dirname}; #{config["build"]}`
  elsif File.exist?("#{repo_dirname}/Makefile")
    STDERR.print `cd #{repo_dirname}; make`
  end
end

def make_cert(config, server)
  # ssh #{server} static-websites-remote cert #{config["domains"].join(" ")}
  `ssh #{server} test -d "/etc/letsencrypt/live/#{config["primary_domain"]}"`

  if $?.exitstatus != 0
    `ssh #{server} certbot certonly --webroot -w "/srv/www/default/" #{config["domains"].map{|d|"-d #{d}"}.join(" ")}`
  end
end

def upload_app(config, server)
  return if config["redirect"]

  repo_dirname = config["repository_directory"]

  `ssh #{server} mkdir -p /srv/www/#{config["primary_domain"]}/public`
  `rsync -a "#{repo_dirname}/#{config.fetch("directory", "build")}/" #{server}:/srv/www/#{config["primary_domain"]}/public`
end

def refresh_nginx(config, server)
  # ssh #{server} static-websites-remote nginx #{config["primary_domain"]}
  primary_domain = config["primary_domain"]

  new = build_nginx_config(config)
  old = `ssh #{server} cat /etc/nginx/sites-available/#{primary_domain}`

  if new != old
    IO.popen("ssh #{server} 'cat > /etc/nginx/sites-available/#{primary_domain}'", "w") {|io| io.write new }
    puts $?

  end

  `ssh #{server} test -f "/etc/nginx/sites-enabled/#{primary_domain}"`

  if $?.exitstatus != 0
    `ssh #{server} ln -s /etc/nginx/sites-available/#{primary_domain} /etc/nginx/sites-enabled/#{primary_domain}`
  end
end

def time
  before = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  yield
  after = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  STDERR.puts "  Took #{humanize_duration(after - before)}"
end

def parse_config(filename)
  config = YAML.load(File.read(filename))
  config["domains"] = config["domains"].split(" ")
  config["primary_domain"] = config["domains"].first

  if config["repository"]
    config["repository_directory"] = "repos/#{config["repository"].gsub(/\//, "_")}"
  end

  config
end

server = ARGV[0]

pattern = ARGV[1] ? "sites/#{ARGV[1]}" : "sites/*"

Dir[pattern].each do |filename|
  STDERR.puts "deploying #{File.basename(filename)}"

  config = parse_config(filename)

  time { fetch_app(config) }
  time { build_app(config) }
  time { make_cert(config, server) }
  time { upload_app(config, server) }
  time { refresh_nginx(config, server) }

  `ssh #{server} service nginx reload`
end
